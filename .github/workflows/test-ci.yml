name: Test & Sonar Scan Workflow

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
    secrets:
      SLACK_WEBHOOK:
        required: true
      SONAR_HOST_URL:
        required: true
      SONAR_TOKEN:
        required: true

jobs:
  build:

    runs-on: self-hosted

    # strategy:

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "package.json"

      - name: Set Node Version
        if: steps.check_files.outputs.files_exists == 'true'
        # Only runs if all of the files exists
        uses: actions/setup-node@v2
        with:
        #Choose which node version [10.x, 12.x, 14.x, 15.x]. Default is 15.x
          node-version: 15.x
      
      - name: Set Python Version
        if: steps.check_files.outputs.files_exists == 'false'
        uses: actions/setup-python@v2
        with:
        #choose which python version [3.6, 3.7, 3.8, 3.9]. betdefault is 3.6
          python-version: 3.6
      
      - name: Install Nodejs Dependencies
        if: steps.check_files.outputs.files_exists == 'true'
        run: npm ci
      
      - name: Install Python Dependencies
        if: steps.check_files.outputs.files_exists == 'false'
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Build Nodejs
        if: steps.check_files.outputs.files_exists == 'true'
        run: npm run build --if-present
      
      - name: Build Python
        if: steps.check_files.outputs.files_exists == 'false'
        run: |
          # stop the build if there are Python syntax errors or undefined names
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --select=E9,F63,F7,F82 --exit-zero --max-complexity=10 --max-line-length=127 --show-source --statistics

      - name: Run Nodejs tests
        if: steps.check_files.outputs.files_exists == 'true'
        run: npm test
      
      - name: Run Python tests
        if: steps.check_files.outputs.files_exists == 'false'
        run: python -m unittest discover tests

      - name: Archive production artifacts
        if: steps.check_files.outputs.files_exists == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: dist-without-markdown
          path: |
            dist
            !dist/**/*.md

      - name: Archive code coverage results
        if: steps.check_files.outputs.files_exists == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: output/test/code-coverage.html
          retention-days: 5
    
    #Enable only when Sonar server is available. It will run Static Code Analysis
      - name: Run Sonar Scan - Nodejs
        if: steps.check_files.outputs.files_exists == 'true'
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectName=${{ inputs.repo_name }}
            -Dsonar.projectVersion=1.0.0
            -Dsonar.verbose=true
            -Dsonar.projectKey=${{ inputs.repo_name }}
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Run Sonar Scan - Python
        if: steps.check_files.outputs.files_exists == 'false'
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.tests=tests/
            -Dsonar.verbose=true
            -Dsonar.projectKey=${{ inputs.repo_name }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      
      # Sends a slack notification to slack build channel on Success
      - name: Slack Notification - On Success
        if: endsWith(GitHub.ref, 'main') && success()
        uses: submittable/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: Unit tests passed successfully!
          SLACK_FOOTER: Powered By Submittable GitHub Actions Library

      # Sends a slack notification to slack build channel on Failure
      - name: Slack Notification - On Failure
        if: endsWith(GitHub.ref, 'main') && failure()
        uses: submittable/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: Unit tests FAILED!
          SLACK_FOOTER: Powered By Submittable GitHub Actions Library
